name: Build and Release Android App

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_android:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Deeply Inspect Keystore Secret
        run: |
          SECRET_VALUE="${{ secrets.SIGNING_KEY_STORE_BASE64 }}"
          echo "--- GitHub Actions Secret Analysis ---"
          echo "Total length of secret received by Actions: ${#SECRET_VALUE}"
          echo "First 20 characters: ${SECRET_VALUE:0:20}..."
          echo "Last 20 characters: ...${SECRET_VALUE: -20}"
          echo "--------------------------------------"
      
      - name: Decode Keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: ./app/android/upload-keystore.jks
          encodedString: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}

      - name: 1. Check if Keystore Secret is Empty
        run: |
          if [ -z "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" ]; then
            echo "Error: The SIGNING_KEY_STORE_BASE64 secret is empty."
            exit 1
          else
            echo "Keystore secret is present."
          fi

      - name: 2. Decode Keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: app/android/upload-keystore.jks
          encodedString: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}

      - name: 3. Verify Keystore File Creation
        run: |
          if [ -f "app/android/upload-keystore.jks" ]; then
            echo "Keystore file was created successfully."
          else
            echo "Error: Keystore file was NOT found at app/android/upload-keystore.jks."
            exit 1
          fi

      - name: Create key.properties
        run: |
          # Use a simple relative path because both files are now in the same directory.
          echo "storeFile=upload-keystore.jks" > ./app/android/key.properties
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" >> ./app/android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> ./app/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> ./app/android/key.properties

      - name: Debug - List files in android directory
        run: ls -la ./app/android

      - name: Debug - Print key.properties content
        run: |
          echo "--- Start of key.properties content ---"
          cat ./app/android/key.properties
          echo "--- End of key.properties content ---"

      - name: Install Flutter dependencies
        working-directory: ./app
        run: flutter pub get

      - name: Build Android App Bundle (AAB)
        working-directory: ./app
        run: flutter build appbundle --release

      - name: Build Android APK
        working-directory: ./app
        run: flutter build apk --release

      - name: Upload App Bundle as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: menstrudel-release-aab
          path: ./app/build/app/outputs/bundle/release/app-release.aab

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: menstrudel-release-apk
          path: ./app/build/app/outputs/flutter-apk/app-release.apk

      - name: Get version from Git tag
        id: get_version
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Upload App Bundle to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./app/build/app/outputs/bundle/release/app-release.aab
          asset_name: menstrudel-${{ env.VERSION }}.aab
          asset_content_type: application/octet-stream

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./app/build/app/outputs/flutter-apk/app-release.apk
          asset_name: menstrudel-${{ env.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive